#!/bin/bash

export TIMEFORMAT=%3R

NUM_EPOCHS=5

NUM_FUNCS=$1

CSV_FILE="data_$NUM_FUNCS.csv"
JSON_FILE="data_$NUM_FUNCS.json"

BASE_C_SRC="base_$NUM_FUNCS.c"
BASE_C_BIN="base_c_$NUM_FUNCS"
BASE_CPP_SRC="base_$NUM_FUNCS.cpp"
BASE_CPP_BIN="base_cpp_$NUM_FUNCS"

MAIN_C_SRC="main_$NUM_FUNCS.c"
MAIN_C_OBJ="main_c_$NUM_FUNCS.o"
MAIN_C_BIN="main_c_$NUM_FUNCS"

MAIN_CPP_SRC="main_$NUM_FUNCS.cpp"
MAIN_CPP_OBJ="main_cpp_$NUM_FUNCS.o"
MAIN_CPP_BIN="main_cpp_$NUM_FUNCS"

MAIN_ENCAPSULATION_CPP_SRC="main_encapsulation_$NUM_FUNCS.cpp"
MAIN_ENCAPSULATION_CPP_OBJ="main_cpp_encapsulation_$NUM_FUNCS.o"
MAIN_ENCAPSULATION_CPP_BIN="main_cpp_encapsulation_$NUM_FUNCS"

MAIN_STATIC_POLY_CPP_SRC="main_static_poly_$NUM_FUNCS.cpp"
MAIN_STATIC_POLY_CPP_OBJ="main_cpp_static_poly_$NUM_FUNCS.o"
MAIN_STATIC_POLY_CPP_BIN="main_cpp_static_poly_$NUM_FUNCS"

MAIN_DYNAMIC_POLY_CPP_SRC="main_dynamic_poly_$NUM_FUNCS.cpp"
MAIN_DYNAMIC_POLY_CPP_OBJ="main_cpp_dynamic_poly_$NUM_FUNCS.o"
MAIN_DYNAMIC_POLY_CPP_BIN="main_cpp_dynamic_poly_$NUM_FUNCS"

printf "num_calls," > $CSV_FILE
printf "c_size_o,cpp_size_o,cpp_encapsulation_size_o,cpp_static_poly_size_o,cpp_dynamic_poly_size_o," >> $CSV_FILE
printf "c_comp_t,cpp_comp_t,cpp_encapsulation_comp_t,cpp_static_poly_comp_t,cpp_dynamic_poly_comp_t," >> $CSV_FILE
printf "c_link_t,cpp_link_t,cpp_encapsulation_link_t,cpp_static_poly_link_t,cpp_dynamic_poly_link_t," >> $CSV_FILE
printf "c_exec_t,cpp_exec_t,cpp_encapsulation_exec_t,cpp_static_poly_exec_t,cpp_dynamic_poly_exec_t\n" >> $CSV_FILE

NUM_CALLS=0
INCREMENT=0
STOP_AT=20000

while true; do

    NUM_CALLS=$((NUM_CALLS + INCREMENT))
    INCREMENT=$((INCREMENT + 1))
    
    if [ $NUM_CALLS -gt $STOP_AT ]; then
        break
    fi

    C_COMPILE_TIME_AVG=0
    C_LINK_TIME_AVG=0
    C_SIZE=0
    C_EXEC_TIME_AVG=0
    BASE_C_SIZE=0
    CPP_COMPILE_TIME_AVG=0
    CPP_LINK_TIME_AVG=0
    CPP_SIZE=0
    CPP_EXEC_TIME_AVG=0
    BASE_CPP_SIZE=0
    CPP_ENCAPSULATION_COMPILE_TIME_AVG=0
    CPP_ENCAPSULATION_LINK_TIME_AVG=0
    CPP_ENCAPSULATION_SIZE=0
    CPP_ENCAPSULATION_EXEC_TIME_AVG=0
    CPP_STATIC_POLY_COMPILE_TIME_AVG=0
    CPP_STATIC_POLY_LINK_TIME_AVG=0
    CPP_STATIC_POLY_SIZE=0
    CPP_STATIC_POLY_EXEC_TIME_AVG=0
    CPP_DYNAMIC_POLY_COMPILE_TIME_AVG=0
    CPP_DYNAMIC_POLY_LINK_TIME_AVG=0
    CPP_DYNAMIC_POLY_SIZE=0
    CPP_DYNAMIC_POLY_EXEC_TIME_AVG=0

    for i in $(seq 1 $NUM_EPOCHS); do

        python3 generate.py $NUM_FUNCS $NUM_CALLS

        gcc -Os -Wall $BASE_C_SRC -o $BASE_C_BIN
        BASE_C_SIZE=`size $BASE_C_BIN | tail -n1 | awk '{print $1}'`

        g++ -Os -std=c++20 -Wall $BASE_CPP_SRC -o $BASE_CPP_BIN
        BASE_CPP_SIZE=`size $BASE_CPP_BIN | tail -n1 | awk '{print $1}'`

        C_COMPILE_TIME=`(time gcc -c -Os $MAIN_C_SRC -o $MAIN_C_OBJ) 2>&1 >/dev/null`
        C_LINK_TIME=`(time gcc -Os -Wall $MAIN_C_OBJ -o $MAIN_C_BIN) 2>&1 >/dev/null`
        C_SIZE=`size $MAIN_C_BIN | tail -n1 | awk '{print $1}'`
        C_EXEC_TIME=`./$MAIN_C_BIN`


        CPP_COMPILE_TIME=`(time g++ -std=c++20 -c -Os $MAIN_CPP_SRC -o $MAIN_CPP_OBJ) 2>&1 >/dev/null`
        CPP_LINK_TIME=`(time g++ -std=c++20 -Os -Wall $MAIN_CPP_OBJ -o $MAIN_CPP_BIN) 2>&1 >/dev/null`
        CPP_SIZE=`size $MAIN_CPP_BIN | tail -n1 | awk '{print $1}'`
        CPP_EXEC_TIME=`./$MAIN_CPP_BIN`

        CPP_ENCAPSULATION_COMPILE_TIME=`(time g++ -std=c++20 -c -Os $MAIN_ENCAPSULATION_CPP_SRC -o $MAIN_ENCAPSULATION_CPP_OBJ) 2>&1 >/dev/null`
        CPP_ENCAPSULATION_LINK_TIME=`(time g++ -std=c++20 -Os -Wall $MAIN_ENCAPSULATION_CPP_OBJ -o $MAIN_ENCAPSULATION_CPP_BIN) 2>&1 >/dev/null`
        CPP_ENCAPSULATION_SIZE=`size $MAIN_ENCAPSULATION_CPP_BIN | tail -n1 | awk '{print $1}'`
        CPP_ENCAPSULATION_EXEC_TIME=`./$MAIN_ENCAPSULATION_CPP_BIN`

        CPP_STATIC_POLY_COMPILE_TIME=`(time g++ -std=c++20 -c -Os $MAIN_STATIC_POLY_CPP_SRC -o $MAIN_STATIC_POLY_CPP_OBJ) 2>&1 >/dev/null`
        CPP_STATIC_POLY_LINK_TIME=`(time g++ -std=c++20 -Os -Wall $MAIN_STATIC_POLY_CPP_OBJ -o $MAIN_STATIC_POLY_CPP_BIN) 2>&1 >/dev/null`
        CPP_STATIC_POLY_SIZE=`size $MAIN_STATIC_POLY_CPP_BIN | tail -n1 | awk '{print $1}'`
        CPP_STATIC_POLY_EXEC_TIME=`./$MAIN_STATIC_POLY_CPP_BIN`

        CPP_DYNAMIC_POLY_COMPILE_TIME=`(time g++ -std=c++20 -c -Os $MAIN_DYNAMIC_POLY_CPP_SRC -o $MAIN_DYNAMIC_POLY_CPP_OBJ) 2>&1 >/dev/null`
        CPP_DYNAMIC_POLY_LINK_TIME=`(time g++ -std=c++20 -Os -Wall $MAIN_DYNAMIC_POLY_CPP_OBJ -o $MAIN_DYNAMIC_POLY_CPP_BIN) 2>&1 >/dev/null`
        CPP_DYNAMIC_POLY_SIZE=`size $MAIN_DYNAMIC_POLY_CPP_BIN | tail -n1 | awk '{print $1}'`
        CPP_DYNAMIC_POLY_EXEC_TIME=`./$MAIN_DYNAMIC_POLY_CPP_BIN`

        C_COMPILE_TIME_AVG=`echo $C_COMPILE_TIME_AVG + $C_COMPILE_TIME | bc`
        C_LINK_TIME_AVG=`echo $C_LINK_TIME_AVG + $C_LINK_TIME | bc`
        C_EXEC_TIME_AVG=`echo $C_EXEC_TIME_AVG + $C_EXEC_TIME | bc`
        CPP_COMPILE_TIME_AVG=`echo $CPP_COMPILE_TIME_AVG + $CPP_COMPILE_TIME | bc`
        CPP_LINK_TIME_AVG=`echo $CPP_LINK_TIME_AVG + $CPP_LINK_TIME | bc`
        CPP_EXEC_TIME_AVG=`echo $CPP_EXEC_TIME_AVG + $CPP_EXEC_TIME | bc`
        CPP_ENCAPSULATION_COMPILE_TIME_AVG=`echo $CPP_ENCAPSULATION_COMPILE_TIME_AVG + $CPP_ENCAPSULATION_COMPILE_TIME | bc`
        CPP_ENCAPSULATION_LINK_TIME_AVG=`echo $CPP_ENCAPSULATION_LINK_TIME_AVG + $CPP_ENCAPSULATION_LINK_TIME | bc`
        CPP_ENCAPSULATION_EXEC_TIME_AVG=`echo $CPP_ENCAPSULATION_EXEC_TIME_AVG + $CPP_ENCAPSULATION_EXEC_TIME | bc`
        CPP_STATIC_POLY_COMPILE_TIME_AVG=`echo $CPP_STATIC_POLY_COMPILE_TIME_AVG + $CPP_STATIC_POLY_COMPILE_TIME | bc`
        CPP_STATIC_POLY_LINK_TIME_AVG=`echo $CPP_STATIC_POLY_LINK_TIME_AVG + $CPP_STATIC_POLY_LINK_TIME | bc`
        CPP_STATIC_POLY_EXEC_TIME_AVG=`echo $CPP_STATIC_POLY_EXEC_TIME_AVG + $CPP_STATIC_POLY_EXEC_TIME | bc`
        CPP_DYNAMIC_POLY_COMPILE_TIME_AVG=`echo $CPP_DYNAMIC_POLY_COMPILE_TIME_AVG + $CPP_DYNAMIC_POLY_COMPILE_TIME | bc`
        CPP_DYNAMIC_POLY_LINK_TIME_AVG=`echo $CPP_DYNAMIC_POLY_LINK_TIME_AVG + $CPP_DYNAMIC_POLY_LINK_TIME | bc`
        CPP_DYNAMIC_POLY_EXEC_TIME_AVG=`echo $CPP_DYNAMIC_POLY_EXEC_TIME_AVG + $CPP_DYNAMIC_POLY_EXEC_TIME | bc`

        #rm $MAIN_C_SRC
        #rm $MAIN_C_OBJ
        #rm $MAIN_C_BIN
        #rm $MAIN_CPP_SRC
        #rm $MAIN_CPP_OBJ
        #rm $MAIN_CPP_BIN
        #rm $MAIN_ENCAPSULATION_CPP_SRC
        #rm $MAIN_ENCAPSULATION_CPP_OBJ
        #rm $MAIN_ENCAPSULATION_CPP_BIN
        #rm $MAIN_STATIC_POLY_CPP_SRC
        #rm $MAIN_STATIC_POLY_CPP_OBJ
        #rm $MAIN_STATIC_POLY_CPP_BIN
        #rm $MAIN_DYNAMIC_POLY_CPP_SRC
        #rm $MAIN_DYNAMIC_POLY_CPP_OBJ
        #rm $MAIN_DYNAMIC_POLY_CPP_BIN
        #rm $BASE_C_SRC
        #rm $BASE_C_BIN
        #rm $BASE_CPP_SRC
        #rm $BASE_CPP_BIN

    done

    C_COMPILE_TIME_AVG=`echo $C_COMPILE_TIME_AVG / $NUM_EPOCHS | bc -l`
    C_LINK_TIME_AVG=`echo $C_LINK_TIME_AVG / $NUM_EPOCHS | bc -l`
    C_EXEC_TIME_AVG=`echo $C_EXEC_TIME_AVG / $NUM_EPOCHS | bc -l`
    CPP_COMPILE_TIME_AVG=`echo $CPP_COMPILE_TIME_AVG / $NUM_EPOCHS | bc -l`
    CPP_LINK_TIME_AVG=`echo $CPP_LINK_TIME_AVG / $NUM_EPOCHS | bc -l`
    CPP_EXEC_TIME_AVG=`echo $CPP_EXEC_TIME_AVG / $NUM_EPOCHS | bc -l`
    CPP_ENCAPSULATION_COMPILE_TIME_AVG=`echo $CPP_ENCAPSULATION_COMPILE_TIME_AVG / $NUM_EPOCHS | bc -l`
    CPP_ENCAPSULATION_LINK_TIME_AVG=`echo $CPP_ENCAPSULATION_LINK_TIME_AVG / $NUM_EPOCHS | bc -l`
    CPP_ENCAPSULATION_EXEC_TIME_AVG=`echo $CPP_ENCAPSULATION_EXEC_TIME_AVG / $NUM_EPOCHS | bc -l`
    CPP_STATIC_POLY_COMPILE_TIME_AVG=`echo $CPP_STATIC_POLY_COMPILE_TIME_AVG / $NUM_EPOCHS | bc -l`
    CPP_STATIC_POLY_LINK_TIME_AVG=`echo $CPP_STATIC_POLY_LINK_TIME_AVG / $NUM_EPOCHS | bc -l`
    CPP_STATIC_POLY_EXEC_TIME_AVG=`echo $CPP_STATIC_POLY_EXEC_TIME_AVG / $NUM_EPOCHS | bc -l`
    CPP_DYNAMIC_POLY_COMPILE_TIME_AVG=`echo $CPP_DYNAMIC_POLY_COMPILE_TIME_AVG / $NUM_EPOCHS | bc -l`
    CPP_DYNAMIC_POLY_LINK_TIME_AVG=`echo $CPP_DYNAMIC_POLY_LINK_TIME_AVG / $NUM_EPOCHS | bc -l`
    CPP_DYNAMIC_POLY_EXEC_TIME_AVG=`echo $CPP_DYNAMIC_POLY_EXEC_TIME_AVG / $NUM_EPOCHS | bc -l`

    printf "$NUM_CALLS," >> $CSV_FILE
    printf "$((C_SIZE-BASE_C_SIZE)),$((CPP_SIZE-BASE_CPP_SIZE)),$((CPP_ENCAPSULATION_SIZE-BASE_CPP_SIZE)),$((CPP_STATIC_POLY_SIZE-BASE_CPP_SIZE)),$((CPP_DYNAMIC_POLY_SIZE-BASE_CPP_SIZE))," >> $CSV_FILE
    printf "$C_COMPILE_TIME_AVG,$CPP_COMPILE_TIME_AVG,$CPP_ENCAPSULATION_COMPILE_TIME_AVG,$CPP_STATIC_POLY_COMPILE_TIME_AVG,$CPP_DYNAMIC_POLY_COMPILE_TIME_AVG," >> $CSV_FILE
    printf "$C_LINK_TIME_AVG,$CPP_LINK_TIME_AVG,$CPP_ENCAPSULATION_LINK_TIME_AVG,$CPP_STATIC_POLY_LINK_TIME_AVG,$CPP_DYNAMIC_POLY_LINK_TIME_AVG," >> $CSV_FILE
    printf "$C_EXEC_TIME_AVG,$CPP_EXEC_TIME_AVG,$CPP_ENCAPSULATION_EXEC_TIME_AVG,$CPP_STATIC_POLY_EXEC_TIME_AVG,$CPP_DYNAMIC_POLY_EXEC_TIME_AVG\n" >> $CSV_FILE

done

python3 plot.py $NUM_FUNCS
