#pragma once

#include <cstdint>
#include <concepts>

namespace hal {
namespace gpio {

// GPIO register base addresses
{%- for port in gpios["ports"] %}
{{data_prefix}} {{data_type}} {{port["address_name"]}} = {{data_macro}}({{port["address"]}});
{%- endfor %}

template <{{data_type}} base_address>
concept is_valid_base_address = (
{%- for port in gpios["ports"] %}
    (base_address == {{port["address_name"]}}){% if not loop.last %} ||{% endif %}
{%- endfor %}
);

enum class ports : std::uint8_t {
{%- for port in gpios["ports"] %}
    {{port["name"]}}{% if not loop.last %},{% endif %}
{%- endfor %}
};

template <ports port>
concept is_valid_port = (
{%- for port in gpios["ports"] %}
    (port == ports::{{port["name"]}}){% if not loop.last %} ||{% endif %}
{%- endfor %}
);

template <ports port>
requires (is_valid_port<port>)
consteval {{data_type}} port_to_base_address () {
{%- for port in gpios["ports"] %}
    {%- if loop.first %}
    if (port == ports::{{port["name"]}}) { return {{port["address_name"]}}; }
    {%- elif not loop.last %}
    else if (port == ports::{{port["name"]}}) { return {{port["address_name"]}}; }
    {%- else %}
    else { return {{port["address_name"]}}; }
    {%- endif %}
{%- endfor %}
}

{%- for register in gpios["registers"] %}
{{data_prefix}} {{data_type}} GPIO_{{register["name"]}}_OFFSET{{" " * (12 - register["name"]|length)}} = {{data_macro}}({{register["offset"]}});
{%- endfor %}

enum class pins : std::uint8_t {
    pin_00 = 0,
    pin_01 = 1,
    pin_02 = 2,
    pin_03 = 3,
    pin_04 = 4,
    pin_05 = 5,
    pin_06 = 6,
    pin_07 = 7,
    pin_08 = 8,
    pin_09 = 9,
    pin_10 = 10,
    pin_11 = 11,
    pin_12 = 12,
    pin_13 = 13,
    pin_14 = 14,
    pin_15 = 15
};

template <pins pin>
concept is_valid_pin = (
    (pin == pins::pin_00) ||
    (pin == pins::pin_01) ||
    (pin == pins::pin_02) ||
    (pin == pins::pin_03) ||
    (pin == pins::pin_04) ||
    (pin == pins::pin_05) ||
    (pin == pins::pin_06) ||
    (pin == pins::pin_07) ||
    (pin == pins::pin_08) ||
    (pin == pins::pin_09) ||
    (pin == pins::pin_10) ||
    (pin == pins::pin_11) ||
    (pin == pins::pin_12) ||
    (pin == pins::pin_13) ||
    (pin == pins::pin_14) ||
    (pin == pins::pin_15)
);

template <pins pin>
concept is_valid_low_pin = (
    (pin == pins::pin_00) ||
    (pin == pins::pin_01) ||
    (pin == pins::pin_02) ||
    (pin == pins::pin_03) ||
    (pin == pins::pin_04) ||
    (pin == pins::pin_05) ||
    (pin == pins::pin_06) ||
    (pin == pins::pin_07)
);

template <pins pin>
concept is_valid_high_pin = (
    (pin == pins::pin_08) ||
    (pin == pins::pin_09) ||
    (pin == pins::pin_10) ||
    (pin == pins::pin_11) ||
    (pin == pins::pin_12) ||
    (pin == pins::pin_13) ||
    (pin == pins::pin_14) ||
    (pin == pins::pin_15)
);

{%- for register in gpios["registers"] %}
// {{register["description"]}}
{%- for field in register["fields"] %}
{{data_prefix}} {{data_type}} GPIO_{{register["name"]}}_{{field["name"]}}_MSK{{" " * (10 - field["name"]|length)}} = {{data_macro}}({{field["bitmask"]}});
{{data_prefix}} {{data_type}} GPIO_{{register["name"]}}_{{field["name"]}}_POS{{" " * (10 - field["name"]|length)}} = {{data_macro}}({{field["offset"]}});
{%- endfor %}
{%- endfor %}

} /* namespace gpio */
} /* namespace hal */