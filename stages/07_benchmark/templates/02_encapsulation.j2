#include <cstdint>

class CRegister {
private:
    const std::uint32_t m_address;
public:
    CRegister (std::uint32_t address) : m_address(address) { }

    void set (std::uint32_t val) const {
        *(reinterpret_cast<volatile std::uint32_t *>(this->m_address)) = val;
    }

    std::uint32_t get () const {
        return *(reinterpret_cast<volatile std::uint32_t *>(this->m_address));
    }

    void set (std::uint32_t value, std::uint32_t bitmask) const {
        std::uint32_t tmp = this->get();
        tmp &= ~bitmask;
        tmp |= value;
        this->set(tmp);
    }

    void set_bits (std::uint32_t bitmask) {
        *(reinterpret_cast<volatile std::uint32_t *>(this->m_address)) = *(reinterpret_cast<volatile std::uint32_t *>(this->m_address)) | bitmask;
    }

    void clear_bits (std::uint32_t bitmask) {
        *(reinterpret_cast<volatile std::uint32_t *>(this->m_address)) = *(reinterpret_cast<volatile std::uint32_t *>(this->m_address)) & ~bitmask;
    }

    bool is_set (std::uint32_t bitmask) {
        return (*(reinterpret_cast<volatile std::uint32_t *>(this->m_address)) & bitmask) == bitmask;
    }

    bool is_cleared (std::uint32_t bitmask) {
        return (*(reinterpret_cast<volatile std::uint32_t *>(this->m_address)) & bitmask) == 0;
    }

    std::uint32_t get_bits (std::uint32_t bitmask) {
        return *(reinterpret_cast<volatile std::uint32_t *>(this->m_address)) & bitmask;
    }
};

{%- for constant in constants %}
#define {{constant["name"]}} {{constant["value"]}}
{%- endfor %}

{%- for enum in enums %}
typedef enum {
    {%- for val in enum["values"] %}
    {{val["name"]}} = {{val["value"]}}{% if not loop.last %},{% endif %}
    {%- endfor %}
} {{enum["name"]}};
{%- endfor %}

{%- for enum in enums %}
#define IS_{{enum["name"]}}(X) ({% for val in enum["values"] %}((X) == {{val["name"]}}){% if not loop.last %} || {% endif %}{% endfor %})
{%- endfor %}

{%- for reg in registers %}
class C{{reg["name"]}} {
private:
    const CRegister m_register { {{reg["address"]}} };

    inline std::uint32_t calculate_value (std::uint32_t shift, std::uint32_t val) {
        return val << (shift * {{reg["mask_mul"]}});
    }

    inline std::uint32_t calculate_bitmask (std::uint32_t shift) {
        return {{reg["mask_name"]}} << (shift * {{reg["mask_mul"]}});
    }
public:
    inline void configure (std::uint32_t shift, std::uint32_t val) {
        m_register.set(calculate_value(shift, val), calculate_bitmask(shift));
    }
};
{%- endfor %}

{%- for struct in structs %}
typedef struct {
    {%- for member in struct["members"] %}
    {{member["type"]}} {{member["name"]}};
    {%- endfor %}
} {{struct["name"]}};
{%- endfor %}

{%- for func in funcs %}
void {{func["name"]}}({{func["param"]["name"]}}* param) {
    __attribute__((unused)) uint32_t temp;

    /* check the values */
    {%- for member in func["param"]["members"] %}
    {%- for enum in enums %}
    {%- if enum["name"] == member["type"] %}
    if (!IS_{{enum["name"]}}(param->{{member["name"]}})) { return; }
    {%- endif %}
    {%- endfor %}
    {%- endfor %}

    {%- for if_block in func["ifs"] %}
    if (param->{{if_block["cond_var"]["name"]}} == {{if_block["cond_val"]["name"]}}) {
        __attribute__((unused)) {{if_block["value"]["type"]}} val = param->{{if_block["value"]["name"]}};
        __attribute__((unused)) {{if_block["shift"]["type"]}} shift = param->{{if_block["shift"]["name"]}};
        {%- for reg in if_block["registers"] %}
        {
            C{{reg["name"]}} reg {};
            reg.configure(shift, val);
        }
        {%- endfor %}
    }
    {%- endfor %}
}
{%- endfor %}

int main (void) {
    {%- for struct in structs %}
    __attribute__((unused)) {{struct["name"]}} inst_{{struct["name"]}} {};
    {%- for member in struct["members"] %}
    inst_{{struct["name"]}}.{{member["name"]}} = {{member["init"]}};
    {%- endfor %}
    {%- endfor %}

    {%- for call in calls %}
    {{call["func"]["name"]}}(&inst_{{call["func"]["param"]["name"]}});
    {%- endfor %}

    while (1) {}
}